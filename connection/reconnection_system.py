# -*- coding: utf-8 -*-
"""
Reconnection System - Sistema de Reconex√£o Contextual com Modo Persistente
Sistema inteligente de reconex√£o que NUNCA desiste completamente
"""

import asyncio
import time
from typing import Optional, Callable, List
from enum import Enum
from utils.logger import get_logger

logger = get_logger(__name__)

class ReconnectionContext(Enum):
    """Contextos de reconex√£o baseados em opera√ß√µes ativas"""
    EMERGENCY_TICKS = "emergency_ticks"        # Opera√ß√µes em ticks ativas - ultra cr√≠tico
    PRIORITY_CONTRACTS = "priority_contracts"  # Contratos normais ativos - cr√≠tico
    NORMAL_IDLE = "normal_idle"               # Sem opera√ß√µes ativas - normal

class ReconnectionStrategy:
    """Estrat√©gia de reconex√£o baseada no contexto"""
    
    def __init__(self, context: ReconnectionContext):
        self.context = context
        self.delays = self._get_delays_for_context()
        self.max_attempts = self._get_max_attempts_for_context()
        self.description = self._get_description()
        # NOVO: Delays para modo persistente (ap√≥s esgotar tentativas iniciais)
        self.persistent_delays = self._get_persistent_delays()
    
    def _get_delays_for_context(self) -> List[float]:
        """Retorna delays de reconex√£o baseados no contexto"""
        if self.context == ReconnectionContext.EMERGENCY_TICKS:
            # Ultra agressivo para opera√ß√µes em ticks
            return [0.5, 1.0, 2.0, 3.0, 5.0, 8.0, 10.0]
        elif self.context == ReconnectionContext.PRIORITY_CONTRACTS:
            # Agressivo para contratos normais
            return [2.0, 4.0, 6.0, 10.0, 15.0, 20.0, 30.0]
        else:  # NORMAL_IDLE
            # Conservador quando idle
            return [10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0]
    
    def _get_max_attempts_for_context(self) -> int:
        """Retorna m√°ximo de tentativas iniciais baseado no contexto"""
        if self.context == ReconnectionContext.EMERGENCY_TICKS:
            return 10  # Mais tentativas para emerg√™ncia
        elif self.context == ReconnectionContext.PRIORITY_CONTRACTS:
            return 7   # Tentativas normais
        else:  # NORMAL_IDLE
            return 5   # Menos tentativas quando idle
    
    def _get_persistent_delays(self) -> List[float]:
        """Retorna delays para modo persistente (ap√≥s tentativas iniciais)"""
        if self.context == ReconnectionContext.EMERGENCY_TICKS:
            return [10.0, 10.0, 10.0]  # 30s, 1m, 2m
        elif self.context == ReconnectionContext.PRIORITY_CONTRACTS:
            return [10.0, 10.0, 10.0]  # 1m, 2m, 5m
        else:  # NORMAL_IDLE
            return [10.0, 10.0, 10.0]  # 2m, 5m, 10m
    
    def _get_description(self) -> str:
        """Retorna descri√ß√£o da estrat√©gia"""
        descriptions = {
            ReconnectionContext.EMERGENCY_TICKS: "üö® EMERG√äNCIA TICKS - Reconex√£o ultra agressiva",
            ReconnectionContext.PRIORITY_CONTRACTS: "‚ö° PRIORIT√ÅRIO - Reconex√£o agressiva",
            ReconnectionContext.NORMAL_IDLE: "üòå NORMAL - Reconex√£o conservadora"
        }
        return descriptions[self.context]
    
    def get_delay(self, attempt: int) -> float:
        """
        Retorna delay para tentativa espec√≠fica
        
        Args:
            attempt: N√∫mero da tentativa (1-based)
            
        Returns:
            float: Delay em segundos
        """
        index = min(attempt - 1, len(self.delays) - 1)
        return self.delays[index]
    
    def get_persistent_delay(self, cycle: int) -> float:
        """
        Retorna delay para modo persistente
        
        Args:
            cycle: N√∫mero do ciclo persistente (1-based)
            
        Returns:
            float: Delay em segundos
        """
        index = min(cycle - 1, len(self.persistent_delays) - 1)
        return self.persistent_delays[index]

class ReconnectionSystem:
    """Sistema de reconex√£o contextual inteligente com modo persistente"""
    
    def __init__(self):
        self.attempt_count = 0
        self.persistent_cycle = 0
        self.current_strategy: Optional[ReconnectionStrategy] = None
        self.is_reconnecting = False
        self.is_persistent_mode = False  # NOVO: Flag para modo persistente
        self.last_disconnection_time = 0.0
        
        # Callbacks para verificar contexto
        self.has_tick_operations_callback: Optional[Callable] = None
        self.has_active_contracts_callback: Optional[Callable] = None
        self.reconnect_callback: Optional[Callable] = None
        
        # Estat√≠sticas
        self.total_reconnections = 0
        self.successful_reconnections = 0
        self.failed_reconnections = 0
        self.persistent_recoveries = 0  # NOVO: Recupera√ß√µes em modo persistente
        self.total_downtime_seconds = 0.0
        
        # Sistema de backup de estado
        self.state_backup_time = 0.0
        self.contracts_backup = {}
        self.balance_backup = 0.0
    
    def set_context_callbacks(self, 
                            has_tick_ops: Callable,
                            has_contracts: Callable,
                            reconnect_func: Callable):
        """
        Define callbacks para verificar contexto
        
        Args:
            has_tick_ops: Fun√ß√£o que retorna True se h√° opera√ß√µes em ticks ativas
            has_contracts: Fun√ß√£o que retorna True se h√° contratos ativos
            reconnect_func: Fun√ß√£o de reconex√£o ass√≠ncrona
        """
        self.has_tick_operations_callback = has_tick_ops
        self.has_active_contracts_callback = has_contracts
        self.reconnect_callback = reconnect_func
    
    def determine_context(self) -> ReconnectionContext:
        """
        Determina contexto atual baseado nas opera√ß√µes ativas
        
        Returns:
            ReconnectionContext: Contexto atual
        """
        # Verificar opera√ß√µes em ticks (mais cr√≠tico)
        if self.has_tick_operations_callback and self.has_tick_operations_callback():
            return ReconnectionContext.EMERGENCY_TICKS
        
        # Verificar contratos normais ativos
        if self.has_active_contracts_callback and self.has_active_contracts_callback():
            return ReconnectionContext.PRIORITY_CONTRACTS
        
        # Sem opera√ß√µes ativas
        return ReconnectionContext.NORMAL_IDLE
    
    def backup_current_state(self):
        """Faz backup do estado antes da desconex√£o"""
        self.state_backup_time = time.time()
        logger.info("üíæ Fazendo backup do estado antes da reconex√£o...")
        
        # Aqui seria feito backup dos contratos ativos, saldo, etc.
        # Por enquanto, apenas log do timestamp
        logger.debug(f"üíæ Estado backupeado em {self.state_backup_time}")
    
    async def start_reconnection(self) -> bool:
        """
        M√âTODO LEGADO - Mantido para compatibilidade
        Redireciona para reconex√£o persistente
        """
        return await self.start_persistent_reconnection()
    
    async def start_persistent_reconnection(self) -> bool:
        """
        Inicia processo de reconex√£o contextual PERSISTENTE (nunca desiste)
        
        Returns:
            bool: True quando conseguir reconectar (sempre eventualmente)
        """
        if self.is_reconnecting:
            logger.warning("‚ö†Ô∏è Reconex√£o j√° em andamento")
            return False
        
        logger.warning("üíî Conex√£o perdida - iniciando reconex√£o PERSISTENTE...")
        
        self.is_reconnecting = True
        self.last_disconnection_time = time.time()
        self.attempt_count = 0
        self.persistent_cycle = 0
        self.is_persistent_mode = False
        self.total_reconnections += 1
        
        # Backup do estado atual
        self.backup_current_state()
        
        # Determinar contexto e estrat√©gia
        context = self.determine_context()
        self.current_strategy = ReconnectionStrategy(context)
        
        logger.info(self.current_strategy.description)
        logger.info(f"üéØ Tentativas iniciais: {self.current_strategy.max_attempts}")
        logger.info(f"üîÑ Modo persistente: Ativado (nunca desiste)")
        
        success = False
        
        try:
            # FASE 1: Tentativas iniciais (comportamento normal)
            success = await self._initial_reconnection_attempts(context)
            
            # FASE 2: Modo persistente (se tentativas iniciais falharam)
            if not success:
                logger.warning("üîÑ Tentativas iniciais esgotadas - ativando MODO PERSISTENTE")
                self.is_persistent_mode = True
                success = await self._persistent_reconnection_loop(context)
            
        except Exception as e:
            logger.error(f"‚ùå Erro cr√≠tico durante reconex√£o: {e}")
            success = False
        
        finally:
            self.is_reconnecting = False
            self.is_persistent_mode = False
            self.current_strategy = None
        
        return success
    
    async def _initial_reconnection_attempts(self, context: ReconnectionContext) -> bool:
        """Executa tentativas iniciais de reconex√£o"""
        while self.attempt_count < self.current_strategy.max_attempts:
            self.attempt_count += 1
            
            # Calcular delay contextual
            delay = self.current_strategy.get_delay(self.attempt_count)
            
            # Log contextual
            context_emoji = "üö®" if context == ReconnectionContext.EMERGENCY_TICKS else \
                           "‚ö°" if context == ReconnectionContext.PRIORITY_CONTRACTS else "üòå"
            
            logger.warning(f"{context_emoji} Tentativa {self.attempt_count}/{self.current_strategy.max_attempts} "
                         f"em {delay:.1f}s [{context.value.upper()}]")
            
            # Aguardar delay
            await asyncio.sleep(delay)
            
            # Tentar reconectar
            if await self._attempt_reconnection():
                return True
        
        return False
    
    async def _persistent_reconnection_loop(self, context: ReconnectionContext) -> bool:
        """Loop persistente de reconex√£o (nunca desiste)"""
        logger.warning("üîÑ MODO PERSISTENTE ATIVADO - Tentando reconectar indefinidamente...")
        
        while True:
            self.persistent_cycle += 1
            
            # Calcular delay persistente
            delay = self.current_strategy.get_persistent_delay(self.persistent_cycle)
            
            logger.warning(f"üîÑ Tentativa persistente #{self.persistent_cycle} em {delay:.0f}s")
            
            # Aguardar delay
            await asyncio.sleep(delay)
            
            # Tentar reconectar
            if await self._attempt_reconnection():
                # Sucesso em modo persistente
                downtime = time.time() - self.last_disconnection_time
                self.total_downtime_seconds += downtime
                self.successful_reconnections += 1
                self.persistent_recoveries += 1
                
                logger.info(f"üéâ RECUPERA√á√ÉO PERSISTENTE ap√≥s {self.attempt_count + self.persistent_cycle} tentativas!")
                logger.info(f"‚è±Ô∏è Downtime total: {downtime:.1f}s | Modo: PERSISTENTE")
                
                return True
            else:
                # Re-avaliar contexto periodicamente
                if self.persistent_cycle % 3 == 0:  # A cada 3 tentativas
                    new_context = self.determine_context()
                    if new_context != context:
                        logger.info(f"üîÑ Contexto mudou: {context.value} ‚Üí {new_context.value}")
                        context = new_context
                        self.current_strategy = ReconnectionStrategy(context)
    
    async def _attempt_reconnection(self) -> bool:
        """Executa uma √∫nica tentativa de reconex√£o"""
        if self.reconnect_callback:
            success = await self.reconnect_callback()
            
            if success:
                # Reconex√£o bem-sucedida
                if not self.is_persistent_mode:
                    # Sucesso em modo normal
                    downtime = time.time() - self.last_disconnection_time
                    self.total_downtime_seconds += downtime
                    self.successful_reconnections += 1
                    
                    logger.info(f"üéâ Reconectado ap√≥s {self.attempt_count} tentativas!")
                    logger.info(f"‚è±Ô∏è Downtime: {downtime:.1f}s | Contexto: {self.current_strategy.context.value}")
                
                return True
            else:
                if not self.is_persistent_mode:
                    logger.error(f"‚ùå Tentativa {self.attempt_count} falhou")
                else:
                    logger.debug(f"‚ùå Tentativa persistente #{self.persistent_cycle} falhou")
        
        return False
    
    def get_reconnection_delay(self, context: Optional[ReconnectionContext] = None) -> float:
        """
        Calcula delay de reconex√£o baseado no contexto
        
        Args:
            context: Contexto espec√≠fico (usa atual se None)
            
        Returns:
            float: Delay em segundos
        """
        if context is None:
            context = self.determine_context()
        
        strategy = ReconnectionStrategy(context)
        return strategy.get_delay(self.attempt_count + 1)
    
    def should_attempt_reconnection(self) -> bool:
        """
        Verifica se deve tentar reconectar
        
        Returns:
            bool: True se deve tentar reconectar
        """
        if self.is_reconnecting:
            return False
        
        # Sempre tentar reconectar, mas usar contexto apropriado
        return True
    
    def get_stats(self) -> dict:
        """
        Retorna estat√≠sticas do sistema de reconex√£o
        
        Returns:
            dict: Estat√≠sticas
        """
        success_rate = 0.0
        if self.total_reconnections > 0:
            success_rate = (self.successful_reconnections / self.total_reconnections) * 100
        
        return {
            'total_reconnections': self.total_reconnections,
            'successful_reconnections': self.successful_reconnections,
            'failed_reconnections': self.failed_reconnections,
            'persistent_recoveries': self.persistent_recoveries,  # NOVO
            'success_rate_percentage': round(success_rate, 1),
            'total_downtime_seconds': round(self.total_downtime_seconds, 1),
            'average_downtime_seconds': round(
                self.total_downtime_seconds / max(1, self.successful_reconnections), 1
            ),
            'is_currently_reconnecting': self.is_reconnecting,
            'is_persistent_mode': self.is_persistent_mode,  # NOVO
            'current_attempt': self.attempt_count,
            'persistent_cycle': self.persistent_cycle,  # NOVO
            'current_context': self.current_strategy.context.value if self.current_strategy else None
        }
    
    def reset_stats(self):
        """Reseta estat√≠sticas de reconex√£o"""
        self.total_reconnections = 0
        self.successful_reconnections = 0
        self.failed_reconnections = 0
        self.persistent_recoveries = 0
        self.total_downtime_seconds = 0.0
        logger.info("üîÑ Estat√≠sticas de reconex√£o resetadas")
    
    def get_context_description(self, context: Optional[ReconnectionContext] = None) -> str:
        """
        Retorna descri√ß√£o do contexto
        
        Args:
            context: Contexto espec√≠fico (usa atual se None)
            
        Returns:
            str: Descri√ß√£o do contexto
        """
        if context is None:
            context = self.determine_context()
        
        descriptions = {
            ReconnectionContext.EMERGENCY_TICKS: "üö® OPERA√á√ïES EM TICKS ATIVAS - CR√çTICO",
            ReconnectionContext.PRIORITY_CONTRACTS: "‚ö° CONTRATOS ATIVOS - PRIORIT√ÅRIO", 
            ReconnectionContext.NORMAL_IDLE: "üòå SEM OPERA√á√ïES - NORMAL"
        }
        
        return descriptions.get(context, "‚ùì CONTEXTO DESCONHECIDO")